# -*- coding: utf-8 -*-
"""DA04_Accidentـv2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WSgBw5mlZy1b6yqK_scX4tT1q-6wQ8Ep
"""

!pip install kaggle --quiet

from google.colab import drive
drive.mount('/content/drive')

# !kaggle datasets download -d sobhanmoosavi/us-accidents
# !unzip us-accidents.zip
import kagglehub
path = kagglehub.dataset_download("sobhanmoosavi/us-accidents")

print(path)

!git clone https://github.com/rapidsai/rapidsai-csp-utils.git
!python rapidsai-csp-utils/colab/pip-install.py

import cudf
cudf.__version__

# import pandas as pd
import cudf as pd

df_total= pd.read_csv("/root/.cache/kagglehub/datasets/sobhanmoosavi/us-accidents/versions/13/US_Accidents_March23.csv")

df_total.describe()

df_total.head(10)

df = df_total[["Severity" , "Weather_Timestamp", "Temperature(F)" , "Wind_Chill(F)" , "Humidity(%)" , "Pressure(in)" , "Visibility(mi)" , "Wind_Direction" , "Wind_Speed(mph)" ,"Precipitation(in)", "Weather_Condition"]]

df.head(10)

df.describe()

"""# پیدا کردن تعدار خالی ها هر ستون"""

print(df.isna().sum())

"""ستون Precipitation

ستون wind chill

به دلیل تعداد خالی های خیلی زیاد بهتر است حذف شوند به نام جدید ذخیره میشود
"""

df1 = df.drop(columns=["Precipitation(in)", "Wind_Chill(F)"])
df1.head()
df1.info()

print(df1.isna().sum())

df1["Weather_Condition"].fillna("Unknown", inplace=True)
df1["Wind_Direction"].fillna("Unknown", inplace=True)
df1["Temperature(F)"] = df1["Temperature(F)"].interpolate(method="linear")
df1["Humidity(%)"] = df1["Humidity(%)"].interpolate(method="linear")
df1["Pressure(in)"] = df1["Pressure(in)"].interpolate(method="linear")
df1["Visibility(mi)"] = df1["Visibility(mi)"].interpolate(method="linear")
df1["Wind_Speed(mph)"] = df1["Wind_Speed(mph)"].interpolate(method="linear")

print(df1.isna().sum())

df1["Wind_Speed(mph)"] = df1["Wind_Speed(mph)"].bfill()
df1["Weather_Timestamp"] = df1["Weather_Timestamp"].ffill()

print(df1.isna().sum())

"""**انکود کردن لیبل دار ها**"""

from sklearn.preprocessing import LabelEncoder

encoder = LabelEncoder()

conditions1 = df["Wind_Direction"].unique()
conditions2 = df["Weather_Condition"].unique()

print(len(conditions1))
print("######################")
print(len(conditions2))

import numpy as np
df1["weather_condition_Label"] = encoder.fit_transform(df1['Weather_Condition'].to_numpy()).astype(np.uint8)

df1["Wind_Direction_label"] = encoder.fit_transform(df1['Wind_Direction'].to_numpy()).astype(np.uint8)

df1.head(10)

df1.info()

"""# فهمیدن بازه اعدادی هر ستون و تصمیم گیری برای تغییر تایپ آن ها"""

df_selected = df[["Severity", "Temperature(F)", "Wind_Chill(F)", "Humidity(%)",
                  "Pressure(in)", "Visibility(mi)", "Wind_Speed(mph)",
                  "Precipitation(in)"]]

print(df_selected.describe())

df1=df1.astype({
    "Severity": np.uint8,
    "Temperature(F)": np.int16,
    "Humidity(%)": np.uint8,
    "Pressure(in)": np.float32,
    "Visibility(mi)": np.uint8,
    "Wind_Speed(mph)": np.uint16,
})

"""# saving df as df1 with reducing size and changing its types"""

df1.info()

df1.head(20)

df1.info()

df2 = df1.drop(columns=["Weather_Condition", "Wind_Direction"])

df2.info()

print(df2.isna().sum())
df2["Weather_Timestamp"] = pd.to_datetime(df2["Weather_Timestamp"])

df2.info()

df2.head(10)

df2=df2.astype({
    "Weather_Timestamp": np.uint32,
})

print(df2.isna().sum())

df2.info()

import seaborn as sns
import matplotlib.pyplot as plt

mean_temp = df2.groupby('Severity')['Temperature(F)'].mean()
print(type(mean_temp))
mean_temp = mean_temp.to_pandas()
print(type(mean_temp))
mean_temp.plot(kind='bar', figsize=(6,4))
plt.title('Mean Temperature per Severity')
plt.xlabel('Severity')
plt.ylabel('Average Temperature (°F)')
plt.grid(True)
plt.tight_layout()
plt.show()

mean_humidity = df2.groupby('Severity')['Humidity(%)'].mean()
mean_humidity= mean_humidity.to_pandas()
mean_humidity.plot(kind='bar', figsize=(6,4))
plt.title('Mean Humidity per Severity')
plt.xlabel('Severity')
plt.ylabel('Average Humidity (%)')
plt.grid(True)
plt.tight_layout()
plt.show()

mean_visibility = df2.groupby('Severity')['Visibility(mi)'].mean()
mean_visibility = mean_visibility.to_pandas()

mean_visibility.plot(kind='bar', figsize=(6,4))
plt.title('Mean Visibility per Severity')
plt.xlabel('Severity')
plt.ylabel('Average Visibility (mi)')
plt.grid(True)
plt.tight_layout()
plt.show()

mean_pressure = df2.groupby('Severity')['Pressure(in)'].mean()
mean_pressure = mean_pressure.to_pandas()

mean_pressure.plot(kind='bar', figsize=(6,4))
plt.title('Mean Pressure per Severity')
plt.xlabel('Severity')
plt.ylabel('Average Pressure (in)')
plt.grid(True)
plt.tight_layout()
plt.show()

mean_wind_speed = df2.groupby('Severity')['Wind_Speed(mph)'].mean()
mean_wind_speed = mean_wind_speed.to_pandas()

mean_wind_speed.plot(kind='bar', figsize=(6,4))
plt.title('Mean Wind Speed per Severity')
plt.xlabel('Severity')
plt.ylabel('Average Wind Speed (mph)')
plt.grid(True)
plt.tight_layout()
plt.show()

numeric_cols = ['Severity', 'Temperature(F)', 'Humidity(%)',
                'Pressure(in)', 'Visibility(mi)', 'Wind_Speed(mph)']

df_corr = df2[numeric_cols].to_pandas()

plt.figure(figsize=(8,6))
sns.heatmap(df_corr.corr(), annot=True, cmap='coolwarm', fmt='.2f', square=True)
plt.title('Correlation Heatmap (Numerical Features)')
plt.tight_layout()
plt.show()

numeric_cols = ['Temperature(F)', 'Humidity(%)', 'Pressure(in)',
                'Visibility(mi)', 'Wind_Speed(mph)']

df_numeric = df2[['Severity'] + numeric_cols].to_pandas()

correlation_with_severity = df_numeric.corr()['Severity'].drop('Severity')

correlation_sorted = correlation_with_severity.sort_values(ascending=False)

plt.figure(figsize=(8,4))
sns.barplot(x=correlation_sorted.values, y=correlation_sorted.index, palette='coolwarm')
plt.title('Correlation of Features with Severity')
plt.xlabel('Correlation Coefficient')
plt.tight_layout()
plt.grid(True)
plt.show()

numeric_cols = ['Severity', 'Temperature(F)', 'Humidity(%)',
                'Pressure(in)', 'Visibility(mi)', 'Wind_Speed(mph)']
df_corr = df2[numeric_cols].to_pandas()

corr_matrix = df_corr.corr()

plt.figure(figsize=(8,6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f',
            vmin=-1, vmax=1, square=True)

plt.title('Correlation Heatmap (-1 to +1 Scale)')
plt.tight_layout()
plt.show()

df3 = df2

df3.head()

def cor_selector(X, y, num_feats):
    cor_list = []
    feature_name = X.columns.tolist()
    # for i in X.columns.tolist():
    #     cor = np.corrcoef(X[i], y)[0, 1]
    #     cor_list.append(cor)
    for i in X.columns.tolist():
        cor = X[i].corr(y)
        cor_list.append(cor)
    cor_list = [0 if np.isnan(i) else i for i in cor_list]
    cor_feature = X.iloc[:,np.argsort(np.abs(cor_list))[-num_feats:]].columns.tolist()
    cor_support = [True if i in cor_feature else False for i in feature_name]
    return cor_support, cor_feature


numerical_features = df3.select_dtypes(include=np.number)

numerical_features = numerical_features.drop('Severity', axis=1)

target = df3['Severity']

num_feats = 5

cor_support, cor_feature = cor_selector(numerical_features, target, num_feats)

print(str(len(cor_feature)), 'selected features')
print('selected features:', cor_feature)

from scipy.stats import pearsonr

def cor_selector(X, y, num_feats):
    cor_list = []
    feature_name = X.columns.tolist()
    for i in X.columns.tolist():
        cor, _ = pearsonr(X[i].to_numpy(), y.to_numpy())  # محاسبه همبستگی پیرسون
        cor_list.append(cor)
    cor_list = [0 if np.isnan(i) else i for i in cor_list]
    cor_feature = X.iloc[:,np.argsort(np.abs(cor_list))[-num_feats:]].columns.tolist()
    cor_support = [True if i in cor_feature else False for i in feature_name]
    return cor_support, cor_feature


numerical_features = df3.select_dtypes(include=np.number)

numerical_features = numerical_features.drop('Severity', axis=1)

target = df3['Severity']


for i in range(1,4):
  num_feats = i

  cor_support, cor_feature = cor_selector(numerical_features, target, num_feats)

  print(str(len(cor_feature)), 'selected features')
  print('selected features:', cor_feature)

import pandas as pd
from sklearn.feature_selection import SelectKBest, chi2



categorical_features = df3[['Wind_Direction_label', 'weather_condition_Label']]

target = df3['Severity']

num_feats = 1

selector = SelectKBest(chi2, k=num_feats)
selector.fit(categorical_features.to_numpy(), target.to_numpy())

selected_features = categorical_features.columns[selector.get_support()]

print(str(len(selected_features)), 'selected categorical features')
print('selected categorical features:', selected_features)